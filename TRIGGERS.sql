/* Οι Triggers με όνομα X_YZ είναι για τον πίνακα log, όπου X το είδος επεξεργασίας, Y ο πίνακας που υπέστη επεξεργασία 
και Z το success που γράφεται. Πριν γίνει η επεξεργασία σε κάποιο πίνακα αποθηκεύουμε το όνομα του χρήστη μέσω της
συνάρτησης USER() που επιστρέφει τον συνδεδεμένο χρήστη στην Βάση δεδομένων μας από τον πίνακα mysql.USER.
Έπειτα αποθηκεύουμε την ώρα και ημερομηνία, το είδος επεξεργασίας και τον πίνακα που υπέστη επεξεργασία.
Θέτουμε το SUCCESS false γιατί η εισαγωγή στο log γίνεται πρίν γίνει κάποια επεξεργασία, με λίγα λόγια αποθηκεύουμε 
την απόπειρα. Αν γίνει όντως η επεξεργασία ενεργοποιείται ο trigger με Ζ = 1 που είναι τύπου λ.χ. after insert και θέτουμε το SUCCESS true. */

DROP TRIGGER IF EXISTS INSERT_EMPLOYEE0;
DELIMITER $
CREATE TRIGGER INSERT_EMPLOYEE0 BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN 
INSERT INTO LOG VALUES(DEFAULT, USER(),CURRENT_TIMESTAMP(),0,'INSERT','EMPLOYEE');
END$
DELIMITER ;

DROP TRIGGER IF EXISTS INSERT_EMPLOYEE1;
DELIMITER $
CREATE TRIGGER INSERT_EMPLOYEE1 AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN 
DECLARE idmax INT(4);
SELECT MAX(ID) INTO idmax FROM LOG WHERE USERNAME=USER();
UPDATE LOG
SET SUCCESS = 1
WHERE USERNAME=USER() AND ID = idmax;
END $
DELIMITER ;


DROP TRIGGER IF EXISTS INSERT_JOB0;
DELIMITER $
CREATE TRIGGER INSERT_JOB0 BEFORE INSERT ON JOB
FOR EACH ROW
BEGIN 
INSERT INTO LOG VALUES(DEFAULT,USER(),CURRENT_TIMESTAMP(),0,'INSERT','JOB');
END $
DELIMITER ;

DROP TRIGGER IF EXISTS INSERT_JOB1;
DELIMITER $
CREATE TRIGGER INSERT_JOB1 AFTER INSERT ON JOB
FOR EACH ROW
BEGIN 
DECLARE idmax INT(4);
SELECT MAX(ID) INTO idmax FROM LOG WHERE USERNAME=USER();
UPDATE LOG
SET SUCCESS ='1'
WHERE USERNAME=USER() AND ID = idmax;
END $
DELIMITER ;



DROP TRIGGER IF EXISTS INSERT_SUBMIT_APPLICATION0;
DELIMITER $
CREATE TRIGGER INSERT_SUBMIT_APPLICATION0 BEFORE INSERT ON SUBMIT_APPLICATION
FOR EACH ROW
BEGIN 
INSERT INTO LOG VALUES(DEFAULT,USER(),CURRENT_TIMESTAMP(),0,'INSERT','SUBMIT APPLICATION');
END $
DELIMITER ;

DROP TRIGGER IF EXISTS INSERT_SUBMIT_APPLICATION1;
DELIMITER $
CREATE TRIGGER INSERT_SUBMIT_APPLICATION1 AFTER INSERT ON SUBMIT_APPLICATION
FOR EACH ROW
BEGIN 
DECLARE idmax INT(4);
SELECT MAX(ID) INTO idmax FROM LOG WHERE USERNAME=USER();
UPDATE LOG
SET SUCCESS ='1'
WHERE USERNAME=USER() AND ID = idmax;
END $
DELIMITER ;



DROP TRIGGER IF EXISTS DELETE_SUBMIT_APPLICATION0;
DELIMITER $
CREATE TRIGGER DELETE_SUBMIT_APPLICATION0 BEFORE DELETE ON SUBMIT_APPLICATION
FOR EACH ROW
BEGIN 
INSERT INTO LOG VALUES(DEFAULT,USER(),CURRENT_TIMESTAMP(),0,'DELETE','SUBMIT APPLICATION');
END $
DELIMITER ;

DROP TRIGGER IF EXISTS DELETE_SUBMIT_APPLICATION1;
DELIMITER $
CREATE TRIGGER DELETE_SUBMIT_APPLICATION1 AFTER DELETE ON SUBMIT_APPLICATION
FOR EACH ROW
BEGIN 
DECLARE idmax INT(4);
SELECT MAX(ID) INTO idmax FROM LOG WHERE USERNAME=USER();
UPDATE LOG
SET SUCCESS ='1'
WHERE USERNAME=USER() AND ID = idmax;
END $
DELIMITER ;


DROP TRIGGER IF EXISTS DELETE_EMPLOYEE0;
DELIMITER $
CREATE TRIGGER DELETE_EMPLOYEE0 BEFORE DELETE ON EMPLOYEE
FOR EACH ROW
BEGIN 
INSERT INTO LOG  VALUES(DEFAULT,USER(),CURRENT_TIMESTAMP(),0,'DELETE','EMPLOYEE');
END $
DELIMITER ;

DROP TRIGGER IF EXISTS DELETE_EMPLOYEE1;
DELIMITER $
CREATE TRIGGER DELETE_EMPLOYEE1 AFTER DELETE ON EMPLOYEE
FOR EACH ROW
BEGIN 
DECLARE idmax INT(4);
SELECT MAX(ID) INTO idmax FROM LOG WHERE USERNAME=USER();
UPDATE LOG
SET SUCCESS ='1'
WHERE USERNAME=USER() AND ID = idmax;
END $
DELIMITER ;




DROP TRIGGER IF EXISTS DELETE_JOB0;
DELIMITER $
CREATE TRIGGER DELETE_JOB0 BEFORE DELETE ON JOB
FOR EACH ROW
BEGIN 
INSERT INTO LOG VALUES(DEFAULT,USER(),CURRENT_TIMESTAMP(),0,'DELETE','JOB');
END $
DELIMITER ;

DROP TRIGGER IF EXISTS DELETE_JOB1;
DELIMITER $
CREATE TRIGGER DELETE_JOB1 AFTER DELETE ON JOB
FOR EACH ROW
BEGIN 
DECLARE idmax INT(4);
SELECT MAX(ID) INTO idmax FROM LOG WHERE USERNAME=USER();
UPDATE LOG
SET SUCCESS ='1'
WHERE USERNAME=USER() AND ID = idmax;
END $
DELIMITER ;





DROP TRIGGER IF EXISTS UPDATE_JOB0;
DELIMITER $
CREATE TRIGGER UPDATE_JOB0 BEFORE UPDATE ON JOB
FOR EACH ROW
BEGIN 
INSERT INTO LOG VALUES(DEFAULT,USER(),CURRENT_TIMESTAMP(),0,'UPDATE','JOB');
END $
DELIMITER ;

DROP TRIGGER IF EXISTS UPDATE_JOB1;
DELIMITER $
CREATE TRIGGER UPDATE_JOB1 AFTER UPDATE ON JOB
FOR EACH ROW
BEGIN 
DECLARE idmax INT(4);
SELECT MAX(ID) INTO idmax FROM LOG WHERE USERNAME=USER();
UPDATE LOG
SET SUCCESS ='1'
WHERE USERNAME=USER() AND ID = idmax;
END $
DELIMITER ;




DROP TRIGGER IF EXISTS UPDATE_EMPLOYEE0;
DELIMITER $
CREATE TRIGGER UPDATE_EMPLOYEE0 BEFORE UPDATE ON EMPLOYEE
FOR EACH ROW
BEGIN 
INSERT INTO LOG VALUES(DEFAULT,USER(),CURRENT_TIMESTAMP(),0,'UPDATE','EMPLOYEE');
END $
DELIMITER ;

DROP TRIGGER IF EXISTS UPDATE_EMPLOYEE1;
DELIMITER $
CREATE TRIGGER UPDATE_EMPLOYEE1 AFTER UPDATE ON EMPLOYEE
FOR EACH ROW
BEGIN 
DECLARE idmax INT(4);
SELECT MAX(ID) INTO idmax FROM LOG WHERE USERNAME=USER();
UPDATE LOG
SET SUCCESS ='1'
WHERE USERNAME=USER() AND ID = idmax;
END $
DELIMITER ;




DROP TRIGGER IF EXISTS UPDATE_SUBMIT_APPLICATION0;
DELIMITER $
CREATE TRIGGER UPDATE_SUBMIT_APPLICATION0 BEFORE UPDATE ON SUBMIT_APPLICATION
FOR EACH ROW
BEGIN 
INSERT INTO LOG VALUES(DEFAULT,USER(),CURRENT_TIMESTAMP(),0,'UPDATE','SUBMIT APPLICATION');
END $
DELIMITER ;

DROP TRIGGER IF EXISTS UPDATE_SUBMIT_APPLICATION1;
DELIMITER $
CREATE TRIGGER UPDATE_SUBMIT_APPLICATION1 AFTER UPDATE ON SUBMIT_APPLICATION
FOR EACH ROW
BEGIN 
DECLARE idmax INT(4);
SELECT MAX(ID) INTO idmax FROM LOG WHERE USERNAME=USER();
UPDATE LOG
SET SUCCESS ='1'
WHERE USERNAME=USER() AND ID = idmax;
END $
DELIMITER ;



DROP TRIGGER IF EXISTS UPDATE_COMPANY; /*Έλεγχος αν γίνεται απόπειρα αλλαγής AFM, DOY, NAME*/
DELIMITER $
CREATE TRIGGER UPDATE_COMPANY BEFORE UPDATE ON COMPANY
FOR EACH ROW
BEGIN
IF (OLD.AFM != NEW.AFM) THEN
SET NEW.AFM = OLD.AFM; /*Αν το AFM διαφέρει, βάλε το παλιό στο UPDATE*/
END IF;
IF (OLD.DOY != NEW.DOY) THEN
SET NEW.DOY = OLD.DOY; /*Αν η DOY διαφέρει, βάλε το παλιό στο UPDATE*/
END IF;
IF (NEW.NAME != OLD.NAME) THEN
SET NEW.NAME = OLD.NAME; /*Αν το NAME διαφέρει, βάλε το παλιό στο UPDATE*/
END IF;
END $
DELIMITER ;


DROP TRIGGER IF EXISTS ADMIN_CHECK; /*Έλεγχος αν ο χρήστης είναι διαχειριστής*/
DELIMITER $
CREATE TRIGGER ADMIN_CHECK BEFORE UPDATE ON USERS
FOR EACH ROW
BEGIN
DECLARE usr VARCHAR(30);
DECLARE usrnow VARCHAR(30);
DECLARE usrcheck VARCHAR(30);
SELECT USER() INTO usr; /*Αποθηκεύουμε τον συνδεδεμένο χρήστη, είναι της μορφής USERNAME@localhost*/
SET usrnow = REPLACE (usr,'@localhost',''); /*Αφαιρούμε το κομμάτι '@localhost' και αποθηκεύουμε στη μεταβλητή usrnow μόνο το USERNAME*/
SELECT USERS.USERNAME INTO usrcheck
FROM USERS 
LEFT JOIN MANAGER ON USERS.USERNAME = MANAGERUSERNAME 
LEFT JOIN EMPLOYEE ON EMPLOYEE.USERNAME = USERS.USERNAME 
LEFT JOIN EVALUATOR ON EVALUATOR.USERNAME = USERS.USERNAME 
WHERE MANAGERUSERNAME IS NULL AND EMPLOYEE.USERNAME IS NULL AND EVALUATOR.USERNAME IS NULL AND USERS.USERNAME = usrnow; 
/*Αν το USERNAME υπάρχει σε έναν από τους πίνακες MANAGER, EMPLOYEE ή EVALUATOR τότε ο χρήστης δεν είναι διαχειριστής*/
IF (NEW.USERNAME != OLD.USERNAME) THEN /*Ελέγχουμε αν έγινε απόπειρα αλλαγής του USERNAME*/
    IF(usrcheck IS NULL) THEN /*Ελέγχουμε αν τελικά ο χρήστης ειναι διαχειριστής*/
        SIGNAL SQLSTATE VALUE '45000'
        SET MESSAGE_TEXT = 'ONLY ADMIN CAN UPDATE USERNAME'; /*Εκτύπωση μηνύματος στην περίπτωση που δεν είναι*/
    END IF;
END IF;
END $
DELIMITER ;
